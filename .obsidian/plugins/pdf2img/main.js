/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var S=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var $=Object.prototype.hasOwnProperty;var A=(o,s)=>{for(var e in s)S(o,e,{get:s[e],enumerable:!0})},N=(o,s,e,i)=>{if(s&&typeof s=="object"||typeof s=="function")for(let t of O(s))!$.call(o,t)&&t!==e&&S(o,t,{get:()=>s[t],enumerable:!(i=I(s,t))||i.enumerable});return o};var k=o=>N(S({},"__esModule",{value:!0}),o);var H={};A(H,{default:()=>y});module.exports=k(H);var n=require("obsidian"),B={enableHeaders:!1,headerSize:"#",headerExtractionSensitive:1.2,imageResolution:1,emptyLine:!0,insertionMethod:"Procedual"},y=class extends n.Plugin{constructor(){super(...arguments);this.ribbonEl=null}async onload(){await this.loadSettings(),this.addSettingTab(new x(this.app,this)),this.ribbonEl=this.addRibbonIcon("image-plus","Convert PDF to images",()=>{this.openPDFToImageModal()}),this.pdfjsLib=await(0,n.loadPdfJs)(),this.fileManager=this.app.fileManager,this.addCommand({id:"open-pdf-to-image-modal",name:"Convert PDF to images",checkCallback:e=>this.app.workspace.getActiveViewOfType(n.MarkdownView)?(e||this.openPDFToImageModal(),!0):!1})}async loadSettings(){this.settings=Object.assign({},B,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}openPDFToImageModal(){let e=this.app.workspace.getActiveViewOfType(n.MarkdownView);e?new P(this.app,this.handlePdf.bind(this,e.editor)).open():new n.Notice("Please open a note to insert images")}insertImageLink(e,i){let t=e.getCursor();e.replaceRange(i,t),this.settings.emptyLine&&e.replaceRange(`

`,e.getCursor()),e.setCursor(e.offsetToPos(e.posToOffset(t)+i.length))}async getAttachmentFolderPath(){return this.fileManager.getAvailablePathForAttachment("")}async extractHeader(e){var r;let t=(await e.getTextContent()).items.map(a=>({text:"str"in a?a.str:"",fontSize:a.transform[0]}));t.sort((a,d)=>d.fontSize-a.fontSize);let g=((r=t[0])==null?void 0:r.fontSize)||0,m=t.filter(a=>a.fontSize===g&&a.text.trim().length>0),h=m.map(a=>a.text).join(" ").trim();if(!h)return"";if(t.filter(a=>a.text.trim().length>0).length===m.length)return h;let f=t.reduce((a,d)=>a+d.fontSize,0)/t.length;return g<f*this.settings.headerExtractionSensitive?"":h}async handlePdf(e,i){let t=null;try{let g=await i.arrayBuffer(),m=new Uint8Array(g),h=await this.pdfjsLib.getDocument({data:m}).promise,u=h.numPages;t=new n.Notice(`Processing PDF: 0/${u} pages`,0);let f=i.name.replace(".pdf",""),r=(0,n.normalizePath)(`${await this.getAttachmentFolderPath()}/${f}`),a=0;for(;await this.app.vault.adapter.exists(r);)a++,r=(0,n.normalizePath)(`${await this.getAttachmentFolderPath()}/${f}_${a}`);await this.app.vault.createFolder(r);let d=[];for(let l=1;l<=u;l++){let c=await h.getPage(l),p=c.getViewport({scale:this.settings.imageResolution}),w=document.createElement("canvas"),F=w.getContext("2d");if(!F)throw new Error("Failed to get canvas context");w.height=p.height,w.width=p.width;let z={canvasContext:F,viewport:p};await c.render(z).promise;let L=await new Promise((C,M)=>{w.toBlob(D=>{D?C(D):M(new Error("Failed to create image blob"))},"image/png")}),E=`page_${l}.png`,T=`${r}/${E}`;await this.app.vault.createBinary(T,await L.arrayBuffer());let b="";this.settings.enableHeaders&&(b=await this.extractHeader(c));let v=`${b?`${this.settings.headerSize} ${b}
`:""}![${E}](${encodeURI(T)})`;this.settings.emptyLine&&(v+=`
`),d.push(v),t.setMessage(`Processing PDF: ${l}/${u} pages`),this.settings.insertionMethod==="Procedual"&&this.insertImageLink(e,v)}if(this.settings.insertionMethod==="Batch"){let l=d.join(`
`),c=e.getScrollInfo(),p=e.getCursor();e.replaceRange(l,p),e.scrollTo(c.left,c.top)}new n.Notice("PDF processing complete")}catch(g){console.error(g),new n.Notice("Failed to process PDF")}finally{t&&t.hide()}}},P=class extends n.Modal{constructor(e,i){super(e);this.onSubmit=i;this.file=null}onOpen(){let{contentEl:e}=this;e.createEl("h2",{text:"Select a PDF file to convert"});let i=e.createEl("input",{type:"file",attr:{accept:".pdf"}});i.onchange=()=>{i.files&&i.files.length>0&&(this.file=i.files[0])};let t=e.createEl("button",{text:"Convert"});t.onclick=()=>{this.file?(this.onSubmit(this.file),this.close()):new n.Notice("Please select a PDF file")}}onClose(){let{contentEl:e}=this;e.empty()}},x=class extends n.PluginSettingTab{constructor(e,i){super(e,i);this.plugin=i}display(){let{containerEl:e}=this;e.empty(),new n.Setting(e).setName("Image quality").setDesc("The quality of the images to be generated. Lower = faster and smaller file size, higher = slower and bigger file size. The default is 1x.").addDropdown(i=>i.addOption("0.5","0.5x").addOption("0.75","0.75x").addOption("1","1x").addOption("1.5","1.5x").addOption("2","2x").setValue(this.plugin.settings.imageResolution.toString()).onChange(async t=>{this.plugin.settings.imageResolution=parseFloat(t),await this.plugin.saveSettings()})),new n.Setting(e).setName("Image insertion method").setDesc("Choose how images are inserted into the editor.").addDropdown(i=>i.addOption("Procedual","Procedual (inserts images one by one)").addOption("Batch","Batch (inserts all images at once)").setValue(this.plugin.settings.insertionMethod).onChange(async t=>{this.plugin.settings.insertionMethod=t,await this.plugin.saveSettings()})),new n.Setting(e).setName("Insert headers (BETA)").setDesc("Finds headers in images and inserts them above the image. This is a beta feature and may not work as expected.").addToggle(i=>i.setValue(this.plugin.settings.enableHeaders).onChange(async t=>{this.plugin.settings.enableHeaders=t,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.enableHeaders&&(new n.Setting(e).setName("Header size").setDesc("The size of the header to be inserted above the image.").addDropdown(i=>i.addOption("#","h1").addOption("##","h2").addOption("###","h3").addOption("####","h4").addOption("#####","h5").setValue(this.plugin.settings.headerSize).onChange(async t=>{this.plugin.settings.headerSize=t,await this.plugin.saveSettings()})),new n.Setting(e).setName("Header extraction sensitivity").setDesc("The sensitivity of the header extraction algorithm. Increase this value if headers are not being detected. Lower this value if non-headers are being detected as headers. The default is 1.2.").addSlider(i=>{i.setLimits(0,2,.1).setValue(this.plugin.settings.headerExtractionSensitive).setDynamicTooltip().onChange(async t=>{this.plugin.settings.headerExtractionSensitive=t,await this.plugin.saveSettings()})})),new n.Setting(e).setName("Empty line after image").setDesc("Adds an empty line after each image.").addToggle(i=>i.setValue(this.plugin.settings.emptyLine).onChange(async t=>{this.plugin.settings.emptyLine=t,await this.plugin.saveSettings()}))}};

/* nosourcemap */